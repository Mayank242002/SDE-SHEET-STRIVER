                                 Day-18



1.  Binary Tree Level Order Traversal

ANS.   1st approach ():

        vector<vector<int>> levelOrder(TreeNode* root) {
         vector<vector<int>> ans; 
        if(root == NULL) return ans; 
        queue<TreeNode*> q; 
        q.push(root); 
        while(!q.empty()) {
            int size = q.size();
            vector<int> level; 
            for(int i = 0;i<size;i++) {
                TreeNode *node = q.front(); 
                q.pop(); 
                if(node->left != NULL) q.push(node->left); 
                if(node->right != NULL) q.push(node->right); 
                level.push_back(node->val); 
            }
            ans.push_back(level); 
        }
        return ans; 
    }

2. maximum Height of a Binary Tree (Maximum Depth)

ANS.   1st approach ():

        int maxDepth(TreeNode* root) {
        if (root==nullptr)
            return 0;
        else
        {
            int x=maxDepth(root->left);
            int y=maxDepth(root->right);
            return 1+max(x,y);
        }
        
    }

3.  Minimum Height of a Binary Tree (Maximum Depth)

ANS.   1st approach ():

      int minDepth(TreeNode* root) {
        if (root==nullptr)
            return 0;
        else
        {
            int x=minDepth(root->left);
            int y=minDepth(root->right);
            return 1+(min(x,y)?min(x,y):max(x,y));  //We need to add the smaller one of the child depths - except if that's zero, then add the larger one.
        }
       
    }


4.  Diameter of Binary Tree

ANS.   1st approach (at every Node, longest path is the (height of left node) + (height of right node)):

       int maxi=0;
    int height(TreeNode *root)
    {
         if (root==nullptr)
            return 0;
        else
        {
            int x=height(root->left);
            int y=height(root->right);
            maxi=max(maxi,x+y);
            return 1+max(x,y);
        }
    }
    int diameterOfBinaryTree(TreeNode* root) {
       height(root);
        return maxi;
    }

      

5.   Balanced Binary Tree

ANS.   1st approach ():

 int height(TreeNode* root)
    {
        if (root==nullptr)
            return 0;
        else
        {
            int x=height(root->left);
            int y=height(root->right);
            if (x==-1 || y==-1) return -1;
            if (abs(x-y)>1) return -1;
            return 1+max(x,y);
        }
    }
    bool isBalanced(TreeNode* root) {
        if (root==nullptr) return true;
        else
        {
            int x=height(root);
            if (x==-1)
                return false;
            return true;
        }


6.  Check if two trees are identical or not

ANS.   1st approach ():

       bool isSameTree(TreeNode* p, TreeNode* q) {
        if (p==nullptr && q==nullptr) return true;
        if (p==nullptr && q!=nullptr) return false;
        if (p!=nullptr && q==nullptr) return false;
        if (p->val!=q->val) return false;
        return isSameTree(p->left,q->left) && isSameTree(p->right,q->right);
        
    }


7.    Binary Tree Zigzag Level Order Traversal

ANS.   1st approach ():

       void level_order(TreeNode* root,vector<vector<int>> &res,bool &flag)
    {
        queue<TreeNode*> q; 
        q.push(root); 
        
        while(!q.empty()) {
            
            int size = q.size();
            vector<int> level; 
            
            for(int i = 0;i<size;i++) {
                
                TreeNode *node = q.front(); 
                q.pop(); 
                if(node->left != NULL) q.push(node->left); 
                if(node->right != NULL) q.push(node->right); 
                level.push_back(node->val); 
                
            }
            if (flag==false)
            res.push_back(level);
            else
            {
                reverse(level.begin(),level.end());
                res.push_back(level);
            }
            flag=!flag;
                
        }
        
    }
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>> res;
         if(root == NULL) return res;
        bool flag=false;
        level_order(root,res,flag);
        return res;
    }


8.   Boundary Traversal of the Binary Tree

ANS.   1st approach (Left boundary nodes, Leaf nodes, Reverse right boundary nodes ):

      bool isLeaf(Node *root)
   {
       if (!root->left && !root->right)
           return true;
       else
           return false;
   }
   void addLeftBoundary(Node *root,vector<int> &res)
   {
       Node *curr=root->left;
       while (curr)
       {
           if (!isLeaf(curr)) res.push_back(curr->data);
           if (curr->left) curr=curr->left;
           else curr=curr->right;
       }
   }
   void addrightBoundary(Node *root,vector<int> &res)
   {
       Node *curr=root->right;
       vector<int> temp;
       while (curr)
       {
           if (!isLeaf(curr)) temp.push_back(curr->data);
           if (curr->right) curr=curr->right;
           else curr=curr->left;
       }
       for (int i=temp.size()-1;i>=0;i--)
          res.push_back(temp[i]);
   }
   void addLeafes(Node *root,vector<int> &res)
   {
       if (root==nullptr) return;
       if (isLeaf(root))
       {
           res.push_back(root->data);
           return;
       }
       addLeafes(root->left,res);
       addLeafes(root->right,res);

   }
    vector <int> boundary(Node *root)
    {
        vector<int> res;
        if (root==nullptr) return res;
        if (!isLeaf(root)) res.push_back(root->data);
        addLeftBoundary(root,res);
        addLeafes(root,res);
        addrightBoundary(root,res);
        return res;
    }
 

    
        
