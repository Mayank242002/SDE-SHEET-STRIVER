                                   DAY-8



1. N Meeting in one Room

ANS.    1st approach (sorting the End array as Sooner the meeting finishes, more chances of performing more meetings : TC-O(n*logn),SC-O(n)):

        static bool sortbysec(const pair<int,int> &a, const pair<int,int> &b)
   {
    return (a.second < b.second);
   }
    //Function to find the maximum number of meetings that can
    //be performed in a meeting room.
    int maxMeetings(int start[], int end[], int n)
    {
        vector<pair<int, int> > vec(n);
        for(int i=0; i<n; i++) 
        {
            vec[i]=make_pair(start[i],end[i]);
        }
        
        sort(vec.begin(), vec.end(), sortbysec);
        
        int ans=1;
        int last_end=vec[0].second;
        for (int i=1;i<n;i++)
        {
            if (vec[i].first>last_end)
            {
                ans++;
                last_end=vec[i].second;
            }
        }
        return ans;
        
    }

2. Minimum Number of Platforms required for a railway

ANS.  1st approach (sorting the arrival and departure time and keep track of maximum platform required at a time  : O(nlogn)+O(n)   Intution:nno matter which train is leaving or which is arriving because if at initial moment any train arrives then we need a platform or if a train departure then the platform will empty. So that's why we are sorting the arrival and departuring time.):

       

      int findPlatform(int arr[], int dep[], int n)
    {
        sort(arr,arr+n);
        sort(dep,dep+n);
        
        int plat=1,res=1,i=1,j=0;
        
        while (i<n && j<n)
        {
            if (arr[i]<=dep[j])
            {
                plat++;
                i++;
            }
            else if (arr[i]>dep[j])
            {
                plat--;
                j++;
            }
            
            res=max(res,plat);
        }
        return res;
    }


3.Job Sequencing Problem

ANS.   1st approach (TC-O(n*logn)+O(n*m), SC-O(N)) :

        static bool comp(Job a,Job b)
    {
        return a.profit>b.profit;
    }
    //Function to find the maximum profit and the number of jobs done.
    vector<int> JobScheduling(Job arr[], int n) 
    { 
        sort(arr,arr+n,comp);
        int maxi=arr[0].dead;
        for (int i=0;i<n;i++)
            maxi=max(maxi,arr[i].dead);
            
        int temp[maxi+1];
        for (int i=1;i<=maxi;i++)
           temp[i]=-1;
           
        int jobs=0,profit=0;
        
        for (int i=0;i<n;i++)
        {
            for (int j=arr[i].dead;j>0;j--)
            {
                if (temp[j]==-1)
                {
                    temp[j]=arr[i].id;
                    jobs++;
                    profit+=arr[i].profit;
                    break;
                }
            }

        }
        vector<int> ans;
        ans.push_back(jobs);
        ans.push_back(profit);
        return ans;
    }

4. Fractional Knapsack

ANS.   1st approach (Sort according to the profit per weight and add them to the bag according to the weight remains  TC-o(N*LOGN),SC-O(1)):


       static bool comp(Item i1,Item i2)
    {
        return (double)i1.value/i1.weight>(double)i2.value/i2.weight;
    }
    //Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(int w, Item arr[], int n)
    {
        sort(arr,arr+n,comp);
        double profit=0;
        
        for (int i=0;i<n && w>0;i++)
        {
            if (arr[i].weight<=w)
            {
                profit+=arr[i].value;
                w-=arr[i].weight;
            }
            else
            {
                
                profit+=arr[i].value*(double)w/arr[i].weight;
                w=0;
            }
        }
        
        return profit;  
    }

5. Greedy algorithm to find the minimum number of coins

ANS.   1st appraoch (Greedy algo fails on the diffrent coins system, applicable on Indian Coins  : TC-O(V)) :

       static bool comp(int a,int b)
	{
	     return a>b;
	}
	int minCoins(int coins[], int M, int V) 
	{ 
	    sort(coins,coins+M,comp);
	    int coinsnumber=0;
	    for (int i=0;i<M && V>0;i++)
	    {
	            while (V>=coins[i])
	            {
	                coinsnumber++;
	                V-=coins[i];
	            }
	    }
	    
	    return coinsnumber;
	} 

6.  Buy Maximum Stocks if i stocks can be bought on i-th day


ANS.   1st approach (less the cost, more no of stocks we can buy,  TC-o(N*LOGN)):

#include <bits/stdc++.h>
using namespace std;


int buyMaximumProducts(int n, int k, int price[])
{
vector<pair<int, int> > v;

// Making pair of product cost and number
// of day..
for (int i = 0; i < n; ++i)
v.push_back(make_pair(price[i], i + 1));

// Sorting the vector pair.
sort(v.begin(), v.end());

// Calculating the maximum number of stock
/ count.
   int ans = 0;
   for (int i = 0; i < n; ++i) 
  {
       ans += min(v[i].second, k / v[i].first);
      k -= v[i].first * min(v[i].second,(k / v[i].first));
  }

return ans;
}

// Driven Program
int main()
{
int price[] = { 10, 7, 19 };
int n = sizeof(price)/sizeof(price[0]);
int k = 45;

cout << buyMaximumProducts(n, k, price) << endl;

return 0;
}

7. Shop in Candy store

ANS. 1st approach () :

     static bool comp(int a,int b)
     {
     return a>b;
      }
    vector<int> candyStore(int candies[], int N, int K)
    {
        sort(candies,candies+N);
        int n=N;
        int minmoney=0;
        for (int i=0;i<N && n>0;i++)
        {
            minmoney+=candies[i];
            n-=(K+1);
        }
        sort(candies,candies+N,comp);
        n=N;
        int maxmoney=0;
        for (int i=0;i<N && n>0;i++)
        {
            maxmoney+=candies[i];
            n-=(K+1);
        }
        
        vector<int> res;
        res.push_back(minmoney);
        res.push_back(maxmoney);
        return res;
    }

8. Minimum Cost to cut a board into squares

ANS.   1st approach (higher the price of cutting at less no of piceses , lower will be the cost  TC-O(N*LOGN)) :

static bool comp(long long a,long long b)
{
    return a>b;
}
int boardCutting(vector<int> cost_y, vector<int> cost_x) {
    
    
    long long m=cost_y.size();
    long long n=cost_x.size();
    long long hr=1,vr=1;
    long long i=0,j=0,cost=0;
    
    sort(cost_y.begin(),cost_y.end(),comp);
    sort(cost_x.begin(),cost_x.end(),comp);
    
    while (i<m && j<n)
    {
        if (cost_y[i]>cost_x[j])
        {
            cost+=cost_y[i]*hr;
            vr++;
            i++;
        }
        else {
            cost+=cost_x[j]*vr;
            hr++;
            j++;
        }
    }
    
    while (i<m)
    {
        cost+=cost_y[i]*hr;
            
            i++;
    }
    while (j<n)
    {
         cost+=cost_x[j]*vr;
            j++;
    }
    
    return (cost%1000000007);

}

9. Check if it is possible to survive on Island

ANS   1st approach (O(1)):

       int minimumDays(int S, int N, int M){
        if (M>N)
        return -1;
        int units=M*S;
        S-=S/7;
        int jobs=ceil((float)units/N);
        if (S>=jobs)
          return jobs;
        else
          return -1;
    }


10. Maximum Number of events that can be attended

ANS.  1st approach (sort according to the end time):

      static bool comp(pair<int,int> p1,pair<int,int> p2)
  {
      if (p1.second!=p2.second)
          return p1.second<p2.second;
      else
        return p1.first<p2.first;
  }
    int maxEvents(int start[], int end[], int N) {
        vector<pair<int,int>> vec(N);
        for (int i=0;i<N;i++)
           vec[i]=make_pair(start[i],end[i]);
           
        sort(vec.begin(),vec.end(),comp);
        
            
        vector<int> temp(100006,-1);
           
        int events=1;
        int lastattended=vec[0].first;
        temp[lastattended]=lastattended;
        for (int i=1;i<N;i++)
        {
                for (int j=vec[i].first;j<=vec[i].second;j++)
                {
                    if (temp[j]==-1)
                    {
                          events++;
                          lastattended=j;
                          temp[j]=lastattended;
                          break;
                    }
                }
              
            
        }
        return events;
    }

11. Maximize sum of Array after K negations

ANS. 1st approach (sort the array and decrease the k accordingly TC-O(N*LOGN)):

      int largestSumAfterKNegations(vector<int>& nums, int k) {
        
        sort(nums.begin(),nums.end());
        int mini=INT_MAX,original_k;
        for (int i=0;i<nums.size() && k>0;i++)
        {
            if (nums[i]<0)
            {
                nums[i]*=-1;
                k--;
            }
            else
            {
                original_k=k;
                k=0;
            }
            mini=min(mini,nums[i]);
        }
        int sum=0;
        for (int i=0;i<nums.size();i++)
            sum+=nums[i];
        if (original_k%2!=0||(k!=0))
        return sum-2*mini;
        else
            return sum;
    }


12. Maximum Product Subarray

ANS.  1st approach (maintaining minimum and maximum product at each index  TC-O(N)):
int maxProduct(vector<int>& nums) {
        int n=nums.size();
        int res=nums[0],maxi=nums[0],mini=nums[0];
        for (int i=1;i<n;i++)
        {
            if (nums[i]<0)
            {
                swap(maxi,mini);
            }
            maxi=max(nums[i],nums[i]*maxi);
            mini=min(nums[i],nums[i]*mini);
            res=max(res,maxi);
        }
        return res;
    }


13. Maximize sum(arr[i]*i) of the array

ANS   1st approach ():

      int Maximize(int a[],int n)
    {
        sort(a,a+n);
        long long sum=0;
        for (int i=0;i<n;i++)
           sum+=(long long)a[i]*i;
           
        return sum%1000000007;
    }

14. Maximum sum of absolute diffrence of Array

ANS.  1st approach (Sort the array and get one maximum and one minimum at atime) :

       int MaxisumDiffrence(int a[],int n)
      {
          vector<int> final;
          
          sort(a,a+n);
          for (int i=0;i<n/2;i++)
          {
             final.push_back(a[i]);
             final.push_back(a[n-i-1]);
           }
           if (n%2!=0)
               final.push_back(a[n/2]);

           int maxi=0;
           for (int i=0;i<n-1;i++)
              maxi+=abs(final[i]-final[i+1]);

           maxi+=abs(final[0]-final[n-1]);
          
           return maxi;

        }


15. Minimum sum of absolute Diffrence of pairs of two array

ANS.   1st approach (sort both the array and calculate the absolute diffrence):

       int minimumSum(vector<int>& arr1, vector<int>& arr2, int n)
{
    sort(arr1.begin(),arr1.end());
    sort(arr2.begin(),arr2.end());
    int result=0;
    for (int i=0;i<n;i++)
        result+=abs(arr1[i]-arr2[i]);
    
    return result;
}

16. smallest subset with sum greater than all other elements

ANS.   1st approach (sort the array in descending order and calculate sum accordingly) :

      int minElements(int arr[], int n)
{
   
    int TotalSum = 0;
    for (int i = 0; i < n; i++)
        TotalSum = TotalSum + arr[i];   
    
    sort(arr, arr + n, greater<int>());
 
    int res = 0, curr_sum = 0;
    for (int i = 0; i < n; i++) {
        curr_sum+=arr[i];
        if (curr_sum>TotalSum-curr_sum)
           return i+1;
    }
    return 0;
}

17. Chocolate Distribution Problem

ANS. 1st approach (sort the array):

    long long findMinDiff(vector<long long> a, long long n, long long m){
    sort(a.begin(),a.end());
    long long res=INT_MAX;
    
    int i=0,j=m-1;
    while (j<n)
    {
        res=min(res,a[j]-a[i]);
        i++;
        j++;
    }
    return res;


18. Defense of Kingdom

ANS.  1st approach (sort the aray of rows and column and select maximum and minimum diffrence ):

#include <iostream>
#include<vector>
#include<algorithm>
using namespace std;

int main() {
	int t;
	cin>>t;
	while(t--)
	{
		int w,h,n;
		cin>>w>>h>>n;
		vector<int> a(n);
		vector<int> b(n);
		a.push_back(0);
		b.push_back(0);
		for (int i=0;i<n;i++)
		{
			int x,y;
			cin>>x>>y;
			a.push_back(x);
		    b.push_back(y);
		}
		a.push_back(w+1);
		b.push_back(h+1);
		
		sort(a.begin(),a.end());
		sort(b.begin(),b.end());
		int mx1=0,mx2=0;
		for (int i=0;i<a.size()-1;i++)
		{
			mx1=max(mx1,a[i+1]-a[i]-1);
			mx2=max(mx2,b[i+1]-b[i]-1);
		}
		cout<< mx1*mx2<<endl;
	}
	return 0;
}


19.  Die hard spoj

ANS.  1st approach (always use Air, and then use Water or Fire According to the H or A):

#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

int main() {
	int t;
	cin>>t;
	while (t--)
	{
		int h,a;
		cin>>h>>a;
		int life=0;
		while (h>0 && a>0)
		{
			h+=3;a+=2;
			life++;
			if ((a>10)&&(h>5))
			{
			    h-=5;a-=10;	
			}
			else
			{
			    h-=20;a+=5;
			    
			}
			if (h>0 && a>0)
			   life++;
		}
		cout<<life<<endl;
	}
	return 0;
}


20.  Minimum Cost of Ropes

ANS.   1st approach (selecting the minimum two and adding to the cost(priority queue) ) :

        long long minCost(long long arr[], long long n) {
       priority_queue<long,vector<long>,greater<long>>q;
       for(int i=0;i<n;i++)
       {
           q.push(arr[i]);
       }
       
       long long cost=0;
       while(q.size()>=2)
       {
           long long a=q.top();
           q.pop();
           long long b=q.top();
           q.pop();
           
           
           cost=cost+a+b;
           q.push(a+b);
       }
       return cost;
   }
     

 
       

21.   Celebrity Problem

ANS.   1st approach ():

 int celebrity(vector<vector<int> >& M, int n) 
    {
        stack<int> st;
        for (int i=0;i<n;i++)
           st.push(i);
           
         while (st.size()>1)
         {
             int i=st.top(); st.pop();
             int j=st.top(); st.pop();
             if (M[i][j]==1)
                 st.push(j);
             else
                 st.push(i);
         }
         
         int x=st.top();
         for (int i=0;i<n;i++)
         {
             if (i!=x)
             {
                 if (M[x][i]==1 || M[i][x]==0)
                    return -1;
             }
            
         }
         return x;
    }

       2nd approach ():

          int celebrity(vector<vector<int> >& M, int n) 
    {
         vector<int> temp(n,0);
        for (int i=0;i<n;i++)
        {
            for (int j=0;j<n;j++)
            {
                if (M[i][j]==1)
                {
                    temp[i]--;
                    temp[j]++;
                }
            }
        }
        for (int i=0;i<n;i++)
        {
            if (temp[i]==n-1) return i;
        }
        return -1;
    }


        

