                                           SDE SHEET STRIVER


                                                 DAY 4


1.Two Sum Problem

ANS. 1st approach (Brute force O(n2))  :

     vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> res;
        for (int i=0;i<nums.size();i++)
        {
            for (int j=i+1;j<nums.size();j++)
            {
                if (nums[i]+nums[j]==target)
                {
                    res.push_back(i);
                    res.push_back(j);
                    break;
                }
            }
        }
        
        return res;
    }

    2nd approach (using map):

     vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> res;
        map<int,int>  m;
        for (int i=0;i<nums.size();i++)
        {
            if (m.find(target-nums[i])==m.end())
            {
                m[nums[i]]=i;
            }
            else
            {
                res.push_back(m[target-nums[i]]);
                res.push_back(i);
                return res;
            }
        }
         return res; 
    }

2. 4 Sum problem 

ANS.   1st approach (first sort and then using 3 pointer apply Binary search on the remaining array   O(n3 *logn)+O(nlogn)):

       2nd approach (sorting the array first and then using left and right pointer   O(n3)+O(nlogn)):

        vector<vector<int>> fourSum(vector<int>& nums, int target) {
        
        vector<vector<int>> res;
        if (nums.empty())
            return res;
        sort(nums.begin(),nums.end());
        int n=nums.size();
        for (int i=0;i<n;i++)
        {
            for (int j=i+1;j<n;j++)
            {
                int left=j+1;
                int right=n-1;
                while (left<right)
                {
                    if (nums[left]+nums[right]<target-(nums[i]+nums[j]))
                        left++;
                    else if (nums[left]+nums[right]>target-(nums[i]+nums[j]))
                        right--;
                    else 
                    {
                        vector<int> temp;
                        temp.push_back(nums[i]);
                        temp.push_back(nums[j]);
                        temp.push_back(nums[left]);
                        temp.push_back(nums[right]);
                        res.push_back(temp);
                        
                        while (left<right && nums[left]==temp[2])
                            left++;
                        while (left<right && nums[right]==temp[3])
                            right--;
                        
                    }
                }
                while (j+1<n && nums[j+1]==nums[j])
                    j++;
                
            }
            
            while (i+1<n && nums[i+1]==nums[i])
                i++;
        }
        
        return res;
        
    }


3.Longest Consecutive Sequence

ANS.   1st approach (Brute force(sort the array and linearly iterate too find longest consecutive sequence   O(nlogn)))  :

         int longestConsecutive(vector<int>& nums) {
        
        sort(nums.begin(),nums.end());
        int count=1,maincount=1;
        if (nums.size()==0)
            return 0;
        for (int i=1;i<nums.size();i++)
        {
            if (nums[i]!=nums[i-1])
            {
                if (nums[i]==nums[i-1]+1)
                count++;
                else
                {
                 maincount=max(count,maincount);
                 count=1;   
                }
                
            }
                
        }
        
            return max(maincount,count);
    }

      2nd approach (O(N)) :

       int longestConsecutive(vector<int>& nums) {
        
        if (nums.size()==0)
            return 0;
        
        unordered_set<int> hashset;
        for (int i:nums)
        {
            hashset.insert(i);
        }
        int longestcount=0;
        for (int i=0;i<nums.size();i++)
        {
            if (!hashset.count(nums[i]-1))
            {
                int currentno=nums[i];
                int count=1;
                
                while (hashset.count(currentno+1))
                {
                    currentno+=1;
                    count+=1;
                }
                
                longestcount=max(longestcount,count);
            }
        }
        
        
        return longestcount;
        
    }


4.Largest Subarray with Zero Sum

ANS.  1st approach (same as maximum subarray sum with little change   O(n3))  :

      2nd approach (using unordered_map(hashtable)   O(nlogn)  or O(n))  :


    int maxLen(int A[], int n)
    {
    unordered_map<int,int> mpp;
    int maxi=0,sum=0;
    
    for (int i=0;i<n;i++)
    {
        sum+=A[i];
        if (sum==0)
           maxi=i+1;
        else
         {
             if (mpp.find(sum)!=mpp.end())
                 maxi=max(maxi,i-mpp[sum]);
             else
                 mpp[sum]=i;
             
         }
    }
    
    return maxi;
}

5.Count the number of subarrays having a given XOR

ANS.   1st approach (Brute force : same as maximum subarray sum with little change   O(n3))  :

       2nd approach (using map  O(nlogn)) :

       int countsubarrayxor(int A[],int B)
       {
        unordered_map<int,int> freq;
        
        int count=0,xorr=0;

        for (auto it: A)
        {
          xorr=xorr^it;

          if (xorr==B)
              count++;
          if (freq.find(xorr^B)!=freq.end())
              count+=freq[xorr^B];
          freq[xorr]+=1;
        }

        return count;
       }    


6.Longest substring without repeat 

ANS.   1st approach (Brute force : finding all substring with no repeated characters  : O(n2)+O(n))  :

       2nd approach (O(n))  :
 
       int lengthOfLongestSubstring(string s) {
        
        vector<int> mpp(256,-1);
        
        int n=s.size();
        int len=0,left=0,right=0;
        
        while (right<n)
        {
            if (mpp[s[right]]!=-1)
                left=max(mpp[s[right]]+1,left);
            
            mpp[s[right]]=right;
            
            len=max(right-left+1,len);
            right++;
        }
        
        
        return len;
        
    }

    
 
