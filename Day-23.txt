                              Day-23 (Graph)


1.   Clone a Graph

ANS.   1st approach ():


2.    DFS

ANS.   1st approach (Graph is given in the from of adjancecy list):

       void dfs(int node,int n,vector<int> adj[],vector<int> &vis,vector<int> &ans)
    {
        ans.push_back(node);
        vis[node]=1;
        for (auto it:adj[node])
        {
            if (vis[it]==0)
              dfs(it,n,adj,vis,ans);
        }
    }
    // Function to return a list containing the DFS traversal of the graph.
    vector<int> dfsOfGraph(int V, vector<int> adj[]) {
        vector<int> vis(V,0);
        vector<int> ans;
        dfs(0,V,adj,vis,ans);
        return ans;
        
    }


3.   BFS

ANS.   1st approach ():

        void bfs(vector<int> adj[],vector<int> &ans,int src,vector<int> &vis)
    {
        queue<int> q;
        vis[src]=1;
        q.push(src);
        while (!q.empty())
        {
            int node=q.front();q.pop();
            ans.push_back(node);
            for (auto it:adj[node])
            {
                if (vis[it]==0)
                {
                    q.push(it);
                    vis[it]=1;
                }
            }
        }
        
    }
    // Function to return Breadth First Traversal of given graph.
    vector<int> bfsOfGraph(int V, vector<int> adj[]) {
        vector<int> ans;
        vector<int> vis(V,0);
        bfs(adj,ans,0,vis);
        return ans;
    }

4.   Detect a Cycle in a Undirected Graph using BFS

ANS.   1st approach ():

       #include<bits/stdc++.h>
using namespace std;

bool CheckForCycle(int start,vector<int> &vis,vector<int> adj[],int v)
{
    queue<pair<int ,int>> q;
    vis[start]=1;
    q.push({start,-1});
    while (!q.empty())
    {
        int node=q.front().first;
        int prev=q.front().second;
        q.pop();
        for (auto it: adj[node])
        {
            if (!vis[it])
            {
                vis[it]=1;
                q.push({it,node});
            }
            else if (it!=prev)
            {
                return true;
            }
        }
    }
    return false;

}
bool isCycle(vector<int> adj[],int v)   //function so that Code works for non connected graphs also
{
    vector<int> vis(v+1,0);
    for (int i=1;i<=v;i++)
    {
        if (!vis[i])
        {
            if (CheckForCycle(i,vis,adj,v))
               return true;
        }
    }

    return false;

}
//graph using adjancency list O(n2)

int main()
{
    int n,m;         //n=no of vertices, m= no of lines of edges 
    cout<<"enter n and m"<<endl;
    cin>>n>>m;
    vector<int> adj[n+1];

    for (int i=1;i<=m;i++)
    {
        int u,v;          //ex:- (2,3) is one line which mens there is a edge beetween 2 and 3
        cin>>u>>v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    if (isCycle(adj,n))
        cout<<"Cycle Detected";
    else
        cout<<"No cycle Detected";
}


5.   Detect Cycle in Undirected Graph using DFS

ANS.   1st approach ():

#include<iostream>
#include<vector>
#include <utility>
#include<queue>
using namespace std;

bool CheckForCycle(int node,int parent,vector<int> adj[],vector<int> &vis)
{
    vis[node]=1;
    for (auto it:adj[node])
    {
        if (vis[it]==0)
        {
            if (CheckForCycle(it,node,adj,vis))
               return true;
        }
        else if (it!=parent)
           return true;
    }

    return false;
}
bool isCycle(vector<int> adj[],int v)   //function so that Code works for non connected graphs also
{
    vector<int> vis(v+1,0);
    for (int i=1;i<=v;i++)
    {
        if (!vis[i])
        {
            if (CheckForCycle(i,-1,adj,vis))
               return true;
        }
    }

    return false;

}

int main()
{
    int n,m;         //n=no of vertices, m= no of lines of edges 
    cout<<"enter n and m"<<endl;
    cin>>n>>m;
    vector<int> adj[n+1];

    for (int i=1;i<=m;i++)
    {
        int u,v;          //ex:- (2,3) is one line which mens there is a edge beetween 2 and 3
        cin>>u>>v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    if (isCycle(adj,n))
        cout<<"Cycle Detected";
    else
        cout<<"No cycle Detected";
}
      

6.   Detect a Cycle in Directed Graph using DFS

ANS.   1st approach ():

7.   Detect a Cycle in Directed Graph using BFS

ANS.   1st approach ():
      




