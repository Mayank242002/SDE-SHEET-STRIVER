                                              SDE SHEET STRIVER


                                                      DAY 5


1.Reverse a LinkedList 

ANS.   1st approach (using three pointer O(n)):

        ListNode* reverseList(ListNode* head) {
        
        ListNode *p=head,*q=nullptr,*r=nullptr;
        
        while (p!=nullptr)
        {
            r=q;
            q=p;
            p=p->next;
            q->next=r;
        }
        head=q;
        return head;
        }


1.1  Reverse a Linked List ||

ANS.   1st approach (move to the left node and take a previous pointer to the previous of left node, reverse the linked list from left to right):

       ListNode* reverseBetween(ListNode* head, int m, int n) {
        ListNode *prev=nullptr,*curr=head;
        int i=0;
        for (;i<m-1;i++)
        {
            prev=curr;
            curr=curr->next;
        }
        ListNode *con=prev,*tail=curr;
        ListNode *p=curr->next;
        for (;i<n-1;i++)
        {
            prev=curr;
            curr=p;
            p=p->next;
            curr->next=prev;
        }
        if (con!=nullptr)
            con->next=curr;
        else
            head=curr;
        tail->next=p;
        return head;   
    }


2.Find middle of LinkedList

ANS.   1st approach (traverse to count the no. of nodes and then again traverse for middle  O(n)+O(n/2))  :

       ListNode* middleNode(ListNode* head) {
        int count=0;
        ListNode *p=head;
        while (p)
        {
            count++;
            p=p->next;
        }
        p=head;
        int count2=0;
        while (p)
        {
            count2++;
            if (count2==((count/2)+1))
                break;
            p=p->next;
        }
        return p;
    }


       2nd approach (slow and fast pointer method or tortoise method  O(n/2))  :

       ListNode* middleNode(ListNode* head) {
       ListNode *p=head,*q=head;
        while (q && q->next)
        {
            p=p->next;
            q=q->next->next;
        }
        return p;
       }

2.1. Reorder List

ANS.  1st approach (first find middle, then reverse the second half of Linked List, then merge in alternating order : O(N)) :

      ListNode* reverseList(ListNode* head) {
        ListNode *p=head,*q=nullptr,*r=nullptr;
        while (p!=nullptr)
        {
            r=q;
            q=p;
            p=p->next;
            q->next=r;
        }
        return q;
        }
        ListNode *middle(ListNode* head)
        {
        ListNode *p=head,*q=head;
        while (q && q->next)
        {
            p=p->next;
            q=q->next->next;
        }
            return p;
        }
    void reorderList(ListNode* head) {
        ListNode *middle1=middle(head);
        ListNode *new_head=reverseList(middle1->next);
        middle1->next=nullptr;
        middle1=nullptr;
		while (new_head)
		{
			middle1 = head->next;
			head->next = new_head;
			head = new_head;
			new_head = middle1;
		}      
    }

2.2. Maximum Twin Sum of a Linked List

ANS.    1st approach (first find middle and then reverse the Linked List and then compute the maximum sum : O(N)):
 ListNode *middle(ListNode* head)
        {
        ListNode *p=head,*q=head;
        while (q && q->next)
        {
            p=p->next;
            q=q->next->next;
        }
            return p;
        }
    ListNode* reverseList(ListNode* head) {
        ListNode *p=head,*q=nullptr,*r=nullptr;
        while (p!=nullptr)
        {
            r=q;
            q=p;
            p=p->next;
            q->next=r;
        }
    
        return q;
        }
       
    
    int pairSum(ListNode* head) {
        ListNode *middle_head=middle(head);
        ListNode *head2=reverseList(middle_head);
        int sum=0,max_sum=0;
        while (head2)
        {
            sum+=head->val+head2->val;
            max_sum=max(sum,max_sum);
            sum=0;
            head=head->next;
            head2=head2->next;
        }
        return max_sum;
        
    }
            
3.Merge Two Sorted Lists

ANS.  1st approach (making a new linked list  SC-O(n+m)  TS-O(n+m))  :

      2nd approach (making changes in existing linked lists   O(n+m))  :

       ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode *last=nullptr,*third=nullptr;
        if (l1==nullptr && l2==nullptr)
            return third;
        if (l1==nullptr || l2==nullptr)
        {
            if (l1==nullptr)
            {
                third=l2;
                return third;
            }
            else{
                third=l1;
                return third;
            }
        }
        
        if (l1->val<l2->val)
        {
            third=last=l1;
            l1=l1->next;
            last->next=nullptr;
        }
        else
        {
            third=last=l2;
            l2=l2->next;
            last->next=nullptr;
        }
        
        while (l1 && l2)
        {
           if (l1->val<l2->val)
        {
            last->next=l1;
            last=l1;
            l1=l1->next;
            last->next=nullptr;
            
        }
         else
         {
             
            last->next=l2;
            last=l2;
            l2=l2->next;
            last->next=nullptr;
         }
        }
        
        while (l1)
        {
            last->next=l1;
            last=l1;
            l1=l1->next;
            last->next=nullptr;
        }
        
        while (l2)
        {
           last->next=l2;
            last=l2;
            l2=l2->next;
            last->next=nullptr; 
        }
        
        return third; 
    }

    OR

     ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode *third=new ListNode();
        ListNode *last=third;
        if (l1==nullptr && l2==nullptr)
            return nullptr;
        if (l1==nullptr || l2==nullptr)
        {
            if (l1==nullptr)
            {
                third=l2;
                return third;
            }
            else{
                third=l1;
                return third;
            }
        }
        
        while (l1 && l2)
        {
            if (l1->val<l2->val)
            {
                last->next=l1;
                last=last->next;
                l1=l1->next;
            }
            else{
                last->next=l2;
                last=last->next;
                l2=l2->next;
            }
        }
        
        if (l1){last->next=l1;}
        else {last->next=l2;}     
        return third->next; 
    }
  
4.Remove N-th node from back of LinkedList 

ANS.   1st approach (first counting total number of nodes and then traversing from front to delete that node  O(n)+O(n)) :

        ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode *p=head,*q=nullptr;
        int count=0;
        while (p)
        {
            count++;
            p=p->next;
        }
        
        p=head;
        count=count-n;
        
        for (int i=0;i<count;i++)
        {
            q=p;
            p=p->next;
        }
        if (q==nullptr)
        {
            q=head;
            head=head->next;
            delete q;
        }
            
        else{
            q->next=p->next;
            delete p;
        }
        
        return head;
    }
      2nd approach (uisng fast and slow pointer technique   O(n)) :

       ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode *f=head,*s=nullptr;
        for (int i=0;i<n-1;i++)
        {
            f=f->next;
        }
        while (f->next!=nullptr)
        {
            if (s==nullptr)
                s=head;
            else
                s=s->next;
            f=f->next;
        }
        if (s==nullptr)
            return head->next;
        
        s->next=s->next->next;
        
        return head; 
    }
4.1 Swapping Nodes in a Linked List

ANS.     1st approach (finding nth from first and last and then swapping them):

              ListNode* swapNodes(ListNode* head, int k) {
        ListNode *head1=head;
        for (int i=0;i<k-1;i++)
            head1=head1->next;
        
        ListNode *main=head1;
        
        ListNode *head2=head;
        while (main->next)
        {
            head2=head2->next;
            main=main->next;
        }
        swap(head2->val,head1->val);
        
        return head;
        
    }
5.Delete Node in a Linked List when that node is given

ANS.   1st approach  (copying the right values to the one left   O(n)) :

       void deleteNode(ListNode* node) {
        
      ListNode *p=node,*temp=nullptr;
     while (p->next!=nullptr)
     {
         p->val=p->next->val;
          if (p->next->next==nullptr)
             temp=p;
         p=p->next; 
     } 
        temp->next=nullptr;
    }

      2nd approach (just copy the next value and modify the next link   O(1))  :

       void deleteNode(ListNode* node) {
     
        node->val=node->next->val;
        node->next=node->next->next;
    }


6. Add two numbers as LinkedList 

ANS.   1st approach (O(max(m,n)))  :

       ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        
       ListNode *dummy=new ListNode();
       ListNode *temp=dummy;
       int carry=0;
      while (l1!=nullptr || l2!=nullptr || carry)
      {
          int sum=0;
          if (l1!=nullptr)
          {
              sum+=l1->val;
              l1=l1->next;
          }
          if (l2!=nullptr)
          {
              sum+=l2->val;
              l2=l2->next;
          }
          
          sum+=carry;
          carry=sum/10;
          ListNode *node=new ListNode();
          node->val=sum%10;
          temp->next=node;
          temp=temp->next;
      }
        
        return dummy->next;
    }

6.1 Add two Numbers - ||

ANS.   1st approach ( Reverse the linked list and then add them and again reverse them:  O(max(n,m))):

        ListNode* reverseList(ListNode* head) {
        
        ListNode *p=head,*q=nullptr,*r=nullptr;
        
        while (p!=nullptr)
        {
            r=q;
            q=p;
            p=p->next;
            q->next=r;
        }
        head=q;
        return head;
        }
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
    l1=reverseList(l1);
    l2=reverseList(l2);
    
         ListNode *dummy=new ListNode();
        ListNode *temp=dummy;
        
        int carry=0;
        
        while (l1 || l2 || carry)
        {
            int sum=0;
            if (l1!=nullptr)
            {
                sum+=l1->val;
                l1=l1->next;
            }
            
            if (l2!=nullptr)
            {
                sum+=l2->val;
                l2=l2->next;
            }
            sum+=carry;
            carry=sum/10;
            ListNode *node=new ListNode();
            node->val=sum%10;
            node->next=nullptr;
            temp->next=node;
            temp=temp->next;
        }
        dummy=reverseList(dummy->next);
        return dummy;
    }

       
