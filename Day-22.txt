                               Day-22



1.  Flatten Binary Tree To linked list

ANS.   1st approach ():  

       void preorder(TreeNode *root,vector<int> &pre)
    {
        if (root==nullptr) return;
        pre.push_back(root->val);
        preorder(root->left,pre);
        preorder(root->right,pre);
    }
    void flatten(TreeNode* root) {
        if (root==nullptr) return ;
        vector<int> pre;
        preorder(root,pre);
        int i=1,n=pre.size();
        TreeNode *main_node=root;
        while (i<n)
        {
            TreeNode *rightnode=new TreeNode(pre[i]);
            main_node->right=rightnode;
            main_node->left=nullptr;
            main_node=main_node->right;
            i++;
        }
        main_node->right=main_node->left=nullptr;
        
    }

     2nd approach ():

     class Solution {
public:
    TreeNode *prev=nullptr;
    void flatten_ll(TreeNode *root)
    {
        if (root==nullptr) return;
        flatten_ll(root->right);
        flatten_ll(root->left);
        root->right=prev;
        root->left=nullptr;
        prev=root;
    }
    void flatten(TreeNode* root) {
        flatten_ll(root);
    }
};


2.   Find Median from Data Stream

ANS.   1st approach (TC-O(n2*logn)):

        vector<int> ans;
    MedianFinder() {
        
    }
    
    void addNum(int num) {
        ans.push_back(num);
        sort(ans.begin(),ans.end());
    }
    
    double findMedian() {
        double res=0;
        if (ans.size()%2!=0)
            res=ans[ans.size()/2];
        else
            res=(ans[ans.size()/2]+ans[(ans.size()/2)-1])/2.0;
        return res;
            
    }

   2nd approach (using insertion sort to insert element TC-O(N2)):

   3rd approach (using maxheap for 1st half and minheap for 2nd half,After inserting, we have to balance the first half and the second half to make sure either they have the same length or the length difference is only 1. TC-(n*logn)):
  
   class MedianFinder {
public:
   priority_queue<int> maxheap; //for 1st half
    priority_queue<int,vector<int>,greater<int>> minheap;  //for 2nd half
    MedianFinder() {
        
    }
    
    void addNum(int num) {
      if (maxheap.empty() || maxheap.top()>num) maxheap.push(num);
      else
          minheap.push(num);
        
       if (maxheap.size()>minheap.size()+1)
       {
            int n=maxheap.top();
            maxheap.pop();
            minheap.push(n);
       }
       else if (maxheap.size()+1<minheap.size())
       {
           int n=minheap.top();
            minheap.pop();
            maxheap.push(n);
       }
    }
    
    double findMedian() {
      if (maxheap.size()==minheap.size()) return ((maxheap.top()+minheap.top())/2.0);
      else
        return (maxheap.size()>minheap.size()?maxheap.top():minheap.top());
    }
};

 



3.   Kth Largest Element in a Stream

ANS.   1st approach (using multiset):

        class KthLargest {
public:
    multiset<int,greater<int>> m;
    int key;
    KthLargest(int k, vector<int>& nums) {
        key=k;
        for (int i:nums)
            m.insert(i);
    }
    
    int add(int val) {
        m.insert(val);
        multiset<int, greater<int> >::iterator itr=m.begin();
        for (int i=0;i<key-1;i++)
            itr++;
        return *itr;
             
            
        
    }
};


     2nd approach ():

    class KthLargest {
public:
    priority_queue<int, vector<int>, greater<int>> pq;
    int size;
    KthLargest(int k, vector<int> nums) {
        size=k;
        for(int i=0;i<nums.size();i++) {
            pq.push(nums[i]);
            if(pq.size()>k) pq.pop();
        }
    }
    
    int add(int val) {
        pq.push(val);
        if(pq.size()>size) pq.pop();
        return pq.top();
    }
};


4.   Distinct numbers in Window

ANS.   1st approach ():

       vector <int> countDistinct (int A[], int n, int k)
    {
        
      vector<int> ans;
      unordered_map<int,int> mp;
      for (int i=0;i<k;i++)
          mp[A[i]]++;    
      ans.push_back(mp.size());

      for (int i=k;i<n;i++)
       {
       mp[A[i-k]]--;
       if (mp[A[i-k]]==0)
          mp.erase(A[i-k]);
    
       mp[A[i]]++;
   
       ans.push_back(mp.size());
       }
    return ans;
    }

       



5.  K-th Largest element in an unsorted array

ANS.   1st approach (nlogn):

       bool static comp(int a,int b)
    {
        return a>b;
    }
    int findKthLargest(vector<int>& nums, int k) {
        sort(nums.begin(),nums.end(),comp);
        return nums[k-1];
        
    }


       2nd approach (using max heap):

     int findKthLargest(vector<int>& nums, int k) {
       priority_queue<int> pq;
        for (int num:nums)
            pq.push(num);
         for (int i=0;i<k-1;i++)
             pq.pop();
        return pq.top();
        
    }


       3rd approach (using min heap):

       int findKthLargest(vector<int>& nums, int k) {
       priority_queue<int,vector<int>,greater<int>> pq;
        for (int num:nums)
        {
            pq.push(num);
            if (pq.size()>k)
                pq.pop();
        }
        return pq.top();
        
    }


6.    Top k Frequent elements

ANS.   1st approach (using max heap):
 
        vector<int> topKFrequent(vector<int>& nums, int k) {
        vector<int> res;
        unordered_map<int,int> mp;
        for (int i:nums)
            mp[i]++;
        
        priority_queue<pair<int,int>> pq;
        
        for (auto it=mp.begin();it!=mp.end();it++)
        {
            pq.push({it->second,it->first});
        }
        while (!pq.empty() && res.size()<k)
        {
            int x=pq.top().second;
            pq.pop();
            res.push_back(x);
        }
        return res;
    }


    2nd approach (using min heap (stores only k element)):

    vector<int> topKFrequent(vector<int>& nums, int k) {
        vector<int> res;
        unordered_map<int,int> mp;
        for (int i:nums)
            mp[i]++;
         
        //using min heap
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
        
        for (auto it=mp.begin();it!=mp.end();it++)
        {
            pq.push({it->second,it->first});
            if (pq.size()>k)
                pq.pop();
        }
        while (!pq.empty() && res.size()<k)
        {
            int x=pq.top().second;
            pq.pop();
            res.push_back(x);
        }
        return res;
    }




7.   Top k Frequent words

ANS.   1st approach (using max heap(comparator)):

      class Solution {
public:
    struct compare
    {
        bool operator()(pair<string,int> p1,pair<string,int> p2)
        {
            if (p1.second==p2.second)
                return p1.first>p2.first;
            else
                return p1.second<p2.second;
        }
    };
    vector<string> topKFrequent(vector<string>& words, int k) {
         vector<string> res;
        unordered_map<string,int> mp;
        for (string i:words)
            mp[i]++;
        
        priority_queue<pair<string,int>,vector<pair<string,int>>,compare> pq(mp.begin(),mp.end());
        
        
        while (!pq.empty() && res.size()<k)
        {
            string x=pq.top().first;
            pq.pop();
            res.push_back(x);
        }
        
        return res;
    }
};


NOTE: Comparator of Priority queues work opposite to the sort function



8. Sort a K sorted Array

ANS.   1st approach (sorting TC-o(N*logn)):

       2nd approach (using min heap of size k TC-o(n*LOGk)):

  int sortK(int arr[], int n, int k) {

  int j=0;
  priority_queue<int,vector<int>,greater<int>> pq;
  for (int i=0;i<n;i++)
  {
      pq.push(arr[i]);
      if (pq.size()>k)
      {
          arr[j++]=pq.top();
          pq.pop();
      }
  }
  
  while (!pq.empty())
  {
      arr[j++]=pq.top();
          pq.pop();
  }
  for (int i=0;i<n;i++)
     cout<<arr[i]<<endl;

}

9.  Find k Closest Elements

ANS.   1st approach (using max heap) :

      vector<int> findClosestElements(vector<int>& arr, int k, int x) {
        vector<int> ans;
        priority_queue<pair<int,int>> pq;
        for (int i=0;i<arr.size();i++)
        {
            pq.push({abs(arr[i]-x),arr[i]});
            if (pq.size()>k)
                pq.pop();
        }
        while (!pq.empty())
        {
            ans.push_back(pq.top().second);
            pq.pop();
        }
        sort(ans.begin(),ans.end());
        return ans;
    }


10.   Sort Array by Increasing Frequency

ANS.   1st approach ():

       class Solution {
public:
    struct compare
    {
      bool operator()(pair<int,int> p1,pair<int,int> p2)
      {
          if (p1.second==p2.second)
              return p1.first<p2.first;
          else
              return p1.second>p2.second;
      }
    };
    vector<int> frequencySort(vector<int>& nums) {
      unordered_map<int,int> mp;
        for (int i:nums)
            mp[i]++;
        priority_queue<pair<int,int>,vector<pair<int,int>>, compare> pq(mp.begin(),mp.end());
        int i=0;
        while (!pq.empty())
        {
            int x = pq.top().first;
            int n = pq.top().second;
            pq.pop();
            for (int j=0;j<n;j++)
                nums[i++]=x;
            
        }
        return nums;
        
    }
};

11.  K closest points to Origin

ANS.   1st approach ():

vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        vector<vector<int>> ans;
        priority_queue<pair<double,pair<int,int>>> pq;
        for (int i=0;i<points.size();i++)
        {
            double temp=sqrt(points[i][1]*points[i][1]+points[i][0]*points[i][0]);
            pq.push({temp,{points[i][0],points[i][1]}});
            if (pq.size()>k)
                pq.pop();
        }
        while (!pq.empty())
        {
            vector<int> temp;
            temp.push_back(pq.top().second.first);
            temp.push_back(pq.top().second.second);
            ans.push_back(temp);
            pq.pop();
        }
        return ans;
    }


12.    Connect Ropes to Minimise the cost

ANS.   1st approach (select two minimum at a time):

       long long minCost(long long arr[], long long n) {
        
       priority_queue<long long,vector<long long>,greater<long long>> pq;
       for (int i=0;i<n;i++)
          pq.push(arr[i]);
        
        long long sum=0;
        while (pq.size()>1)
        {
            long long temp_sum=pq.top();
            pq.pop();
            temp_sum+=pq.top();
            pq.pop();
            sum+=temp_sum;
            pq.push(temp_sum);
        }
        return sum;
       
    }


13.    Sum of Elements between k1 smallest and k2 smallest numbers

ANS.   1st approach (using only one heap):

       long long sumBetweenTwoKth( long long A[], long long N, long long K1, long long K2)
    {
        priority_queue<long long> pq;
        for (long long i=0;i<N;i++)
        {
            pq.push(A[i]);
            if (pq.size()>K2)
              pq.pop();
        }
        long long sum=0;
        pq.pop();
        while (pq.size()>K1)
        {
            sum+=pq.top();
            pq.pop();
        }
        return sum;
    }


    2nd approach (calcualting k1 smallest and k2 smallest number seprately)


      

12 .   Flood fill Algorithm

ANS.   1st approach ():

       void fill(vector<vector<int>>& image, int sr, int sc, int newColor,int oldColor,int r,int c)
    {
        if (sr<0 || sr>=r || sc<0 || sc>=c || image[sr][sc]==newColor || image[sr][sc]!=oldColor) return;
        
        if (image[sr][sc]==oldColor)
            image[sr][sc]=newColor;
          
        fill(image,sr-1,sc,newColor,oldColor,r,c);
       
        fill(image,sr+1,sc,newColor,oldColor,r,c);
                
        fill(image,sr,sc+1,newColor,oldColor,r,c);
        
        fill(image,sr,sc-1,newColor,oldColor,r,c);
        
        
    }
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
        fill(image,sr,sc,newColor,image[sr][sc],image.size(),image[0].size());
        return image;
    }






