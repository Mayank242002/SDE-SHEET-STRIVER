                                Day-19



1.    Binary Tree Maximum Path Sum

ANS.   1st approach ():

        int maxi=INT_MIN;
    int path_sum(TreeNode *root)
    {
        if (root==nullptr)
            return 0;
        else
        {
            int x=path_sum(root->left);  if (x<0) x=0;
            int y=path_sum(root->right);  if (y<0) y=0;
            maxi=max(maxi,x+y+root->val);
            return max(x,y)+root->val;
        }
    }
    int maxPathSum(TreeNode* root) {
        if (root->left==nullptr && root->right==nullptr )
            return root->val;
        
        path_sum(root);
        return maxi;
    }


2.   Construct Binary Tree from Inorder and Preorder

ANS.   1st approach ():

       TreeNode *Build(vector<int>& preorder,int preStart,int preEnd ,vector<int>& inorder,int inStart,int inEnd,map<int,int> &inMap)
    {
        if (preStart>preEnd || inStart>inEnd)
            return nullptr;
        TreeNode *root=new TreeNode(preorder[preStart]);
        int inroot=inMap[root->val];
        int numsLeft=inroot-inStart;
        
        root->left=Build(preorder,preStart+1,preStart+numsLeft,inorder,inStart,inroot-1,inMap);
        root->right=Build(preorder,preStart+numsLeft+1,preEnd,inorder,inroot+1,inEnd,inMap);
        return root;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
       map<int,int> inMap;
        for (int i=0;i<inorder.size();i++)
            inMap[inorder[i]]=i;
        
        TreeNode *root=Build(preorder,0,preorder.size()-1,inorder,0,inorder.size()-1,inMap);
        return root;
    }





3.    Construct Binary Tree from Inorder and Postorder


ANS.    1st approach (same as above (only change is that now we traverse from end of postorder)):

    TreeNode *Build(vector<int>& postorder,int postStart,int postEnd ,vector<int>& inorder,int inStart,int inEnd,map<int,int> &inMap)
    {
        if (postStart>postEnd || inStart>inEnd)
            return nullptr;
        TreeNode *root=new TreeNode(postorder[postEnd]);
        int inroot=inMap[root->val];
        int numsLeft=inroot-inStart;
        
        root->left=Build(postorder,postStart,postStart+numsLeft-1,inorder,inStart,inroot-1,inMap);
        root->right=Build(postorder,postStart+numsLeft,postEnd-1,inorder,inroot+1,inEnd,inMap);
        return root;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        map<int,int> inMap;
        for (int i=0;i<inorder.size();i++)
            inMap[inorder[i]]=i;
        
        TreeNode *root=Build(postorder,0,postorder.size()-1,inorder,0,inorder.size()-1,inMap);
        return root;
    }


4.  Symmetric Binary Tree

ANS.   1st approach ():

        bool check(TreeNode *p,TreeNode *q)
    {
       if (p==nullptr && q==nullptr) return true;
       if (p!=nullptr && q==nullptr) return false;
       if (p==nullptr && q!=nullptr) return false;
       if (p->val!=q->val) return false;
       
       return check(p->left,q->right) && check(p->right,q->left);
    }
    bool isSymmetric(TreeNode* root) {
    
    return check(root->left,root->right);
    }


5.   Flatten Binary Tree to Linked List

ANS.   1st approach (first storing preorder, then creating new tree from it):
 
       void preorder(TreeNode *root,vector<int> &pre)
    {
        if (root==nullptr) return;
        pre.push_back(root->val);
        preorder(root->left,pre);
        preorder(root->right,pre);
    }
    void flatten(TreeNode* root) {
        if (root==nullptr) return ;
        vector<int> pre;
        preorder(root,pre);
        int i=1,n=pre.size();
        TreeNode *main_node=root;
        while (i<n)
        {
            TreeNode *rightnode=new TreeNode(pre[i]);
            main_node->right=rightnode;
            main_node->left=nullptr;
            main_node=main_node->right;
            i++;
        }
        main_node->right=main_node->left=nullptr;
        
    }


    2nd approach (we store the node which postorder is already completed in prev and connect it with next ndoe):

     TreeNode *prev=nullptr;
    void flatten_ll(TreeNode *root)
    {
        if (root==nullptr) return;
        flatten_ll(root->right);
        flatten_ll(root->left);
        root->right=prev;
        root->left=nullptr;
        prev=root;
    }
    void flatten(TreeNode* root) {
        flatten_ll(root);
    }



6.   convert to mirror tree

ANS.    1st approach ():

        void mirror(struct Node* node) {
    if (node==NULL) return ;
    struct Node *temp=node->left;
    node->left=node->right;
    node->right=temp;
    mirror(node->left);
    mirror(node->right);
    
}



7.   Check for children sum property

ANS.   1st approach ():

void changeTree(BinaryTreeNode < int > * root) {
    if (root==nullptr) return;
    int child=0;
	if (root->left) child+=root->left->data;
	if (root->right) child+=root->right->data;
	
	if (child>=root->data) root->data=child;
	else
	{
		if (root->left) root->left->data=root->data;
	    if (root->right) root->right->data=root->data;
	}
	
	changeTree(root->left);
	changeTree(root->right);
	
	int tot=0;
	if (root->left) tot+=root->left->data;
	if (root->right) tot+=root->right->data;
	
	if (root->left || root->right) root->data=tot;	
}  
     

8.   All Node Distance K from target

ANS.   1st approach (1.mark the parents for each node 2.traverse parent, left node and right node each time):

       void markParents(TreeNode* root,unordered_map<TreeNode *,TreeNode *> &parent_mark)
    {
        queue<TreeNode*> q;
        q.push(root);
        while (!q.empty())
        {
            TreeNode *current=q.front();
            q.pop();
            if (current->left)
            {
                parent_mark[current->left]=current;
                q.push(current->left);
            }
            if (current->right)
            {
                parent_mark[current->right]=current;
                q.push(current->right);
            }
        }
    }
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        unordered_map<TreeNode *,TreeNode *> parent_mark;
        markParents(root,parent_mark);
        unordered_map<TreeNode *,bool> visted;
        queue<TreeNode *> queue;
        queue.push(target);
        visted[target] = true;
        int current_level=0;
        while (!queue.empty())
        {
            int size=queue.size();
            if (current_level++==k) break;
            for (int i=0;i<size;i++)
            {
                TreeNode *curr=queue.front();
                queue.pop();
                if (curr->left && !visted[curr->left])
                {
                    queue.push(curr->left);
                    visted[curr->left]=true;
                }
                if (curr->right && !visted[curr->right])
                {
                    queue.push(curr->right);
                    visted[curr->right]=true;
                }
                if (parent_mark[curr] && !visted[parent_mark[curr]])
                {
                    queue.push(parent_mark[curr]);
                    visted[parent_mark[curr]]=true;
                }   
            }
            
        }
          vector<int> res;
            while (!queue.empty())
            {
                res.push_back(queue.front()->val);
                queue.pop();
            }
        return res;
    }  



9.    Minimum Time taken to burn the Binary Tree From a Node

ANS.   

   1st approach (minimum distance from given node to mark all the nodes of the tree):

BinaryTreeNode<int>* bfsToMapParents(BinaryTreeNode<int>* root, 
                                     map<BinaryTreeNode<int>*, BinaryTreeNode<int>*> &mpp, int start) {
    queue<BinaryTreeNode<int>*> q; 
    q.push(root); 
    BinaryTreeNode<int>* res; 
    while(!q.empty()) {
        BinaryTreeNode<int>* node = q.front(); 
        if(node->data == start) res = node; 
        q.pop(); 
        if(node->left) {
            mpp[node->left] = node; 
            q.push(node->left); 
        }
        if(node->right) {
            mpp[node->right] = node;
            q.push(node->right); 
        }
    }
    return res; 
}
int findMaxDistance(map<BinaryTreeNode<int>*, BinaryTreeNode<int>*> &mpp, BinaryTreeNode<int>* target) {
    queue<BinaryTreeNode<int>*> q; 
    q.push(target); 
    map<BinaryTreeNode<int>*,int> vis; 
    vis[target] = 1;
    int maxi = 0; 
    while(!q.empty()) {
        int sz = q.size();
        int fl = 0; 
        for(int i = 0;i<sz;i++) {
            auto node = q.front();
            q.pop();
            if(node->left && !vis[node->left]) {
                fl = 1; 
                vis[node->left] = 1; 
                q.push(node->left); 
            }
            if(node->right && !vis[node->right]) {
                fl = 1; 
                vis[node->right] = 1; 
                q.push(node->right); 
            }
            
            if(mpp[node] && !vis[mpp[node]]) {
                fl = 1; 
                vis[mpp[node]] = 1; 
                q.push(mpp[node]); 
            } 
        }
        if(fl) maxi++; 
    }
    return maxi; 
}
int timeToBurnTree(BinaryTreeNode<int>* root, int start)
{
    map<BinaryTreeNode<int>*, BinaryTreeNode<int>*> mpp; 
    BinaryTreeNode<int>* target = bfsToMapParents(root, mpp, start);
	int maxi = findMaxDistance(mpp, target); 
    return maxi;
}
        
 
2nd approach (mark parents first , then consider start node as root and return the maximum height):

int height(Node* root ,   unordered_map<Node*,Node*>&par ,  unordered_map<Node*, int>&vis)
{
    if(!root)
    return 0;
    
    vis[root]=1;
    
    int lh= INT_MIN;
     int rh= INT_MIN;
      int ph= INT_MIN;
    
    if(!vis[root->left])
     lh= height(root->left, par, vis);
      if(!vis[root->right])
        rh= height(root->right, par, vis);
          if(!vis[par[root]])
        ph= height(par[root] , par, vis);
    
    return  max(ph, max(lh,rh)) +1;
}


10.  Count Nodes in complete Binary Tree

ANS.   1st approach (count all nodes using any traversal):

       int countNodes(TreeNode* root) {
        if (root==nullptr)
            return 0;
        int x=countNodes(root->left);
        int y=countNodes(root->right);
        return x+y+1;
    }


       2nd approach (for each node count the left nodes height and right nodes height if equal then apply the formula for number of nodes, else 1+countleft()+countRight()) :

       int findleftHeight(TreeNode *root)
    {
        int count=0;
        while (root)
        {
            count++;
            root=root->left;
        }
        return count;
    }
     int findrightHeight(TreeNode *root)
    {
        int count=0;
        while (root)
        {
            count++;
            root=root->right;
        }
        return count;
    }
    int countNodes(TreeNode* root) {
        if (root==nullptr) return 0;
        
        int l=findleftHeight(root);
        int r=findrightHeight(root);
        
        if (l==r)
            return (pow(2,l)-1);
        else
            return 1+countNodes(root->left)+countNodes(root->right);
    }



11.    Serialize and deserialize the Binary Tree

ANS.   1st approach ():

        string serialize(TreeNode* root) {
        if (root==nullptr) return "";
        string s="";
        queue<TreeNode *> q;
        q.push(root);
        while (!q.empty())
        {
            TreeNode *curr=q.front();
            q.pop();
            if (curr==nullptr) s+="#,";
            else
            {
                s+=to_string(curr->val)+",";
                q.push(curr->left);
                q.push(curr->right);
            }
        }
        return s;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
       if(data.size() == 0) return NULL; 
        stringstream s(data);
        string str; 
        getline(s, str, ',');
        TreeNode *root = new TreeNode(stoi(str));
        queue<TreeNode*> q; 
        q.push(root); 
        while(!q.empty()) {
            
            TreeNode *node = q.front(); 
            q.pop(); 
            
            getline(s, str, ',');
            if(str == "#") {
                node->left = NULL; 
            }
            else {
                TreeNode* leftNode = new TreeNode(stoi(str)); 
                node->left = leftNode; 
                q.push(leftNode); 
            }
            
            getline(s, str, ',');
            if(str == "#") {
                node->right = NULL; 
            }
            else {
                TreeNode* rightNode = new TreeNode(stoi(str)); 
                node->right = rightNode;
                q.push(rightNode); 
            }
        }
        return root; 
    }
