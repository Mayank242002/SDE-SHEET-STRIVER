                               SDE SHEET STRIVER


                                      DAY 2


1.Set Matrix Zeros

ANS.  1st approach (Brute force appraoch O(n*m)+O(n*m))  :

       class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        int m=matrix.size();
        int count=0;
        int n=matrix[0].size();
        int i,j,k;
        for (i=0;i<m;i++)
        {
            for (j=0;j<n;j++)
            {
                if (matrix[i][j]==0)
                {
                    for (k=0;k<n;k++)
                        if (matrix[i][k]!=0)
                        matrix[i][k]=-1;
                    for (k=0;k<m;k++)
                        if (matrix[k][j]!=0)
                        matrix[k][j]=-1;
                    count++;
                }
            }
            
        }
        
        for (i=0;i<m;i++)
        {
            for (j=0;j<n;j++)
            {
                if (matrix[i][j]==-1 && count!=0)
                {
                    matrix[i][j]=0;
                }
            }
            
        }
        
        
    }
};

     2nd approach (take two dummy array of size m and n  and update with them 0 as the we find any item as 0  and then traverse again to set all those places to zero which have 0 in their index in dummy array):

     void setZeroes(vector<vector<int>>& matrix) {
        int rows=matrix.size();
        int count=1;
        int colms=matrix[0].size();
        
        vector<int> r(rows,1);
        vector<int> c(colms,1);
        
        for (int i=0;i<rows;i++)
        {
            for (int j=0;j<colms;j++)
            {
                if (matrix[i][j]==0)
                {
                    r[i]=0;
                    c[j]=0;
                }
            }
        }
        
        
       for (int i=0;i<rows;i++)
        {
            for (int j=0;j<colms;j++)
            {
                if (r[i]==0 || c[j]==0)
                {
                    matrix[i][j]=0;
                }
            }
        }
    }

     3rd approach (take two dummy array as first row and column, count specifies that whether any elements in the 1st column is Zero or not || count==1(no zero in column 1), count==0(zero present in column one) )  :

      
      class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        int rows=matrix.size();
        int count=1;
        int colms=matrix[0].size();
        
        for (int i=0;i<rows;i++)
        {
            if (matrix[i][0]==0)
                count=0;
            
            for (int j=1;j<colms;j++)
            {
                if (matrix[i][j]==0)
                {
                    matrix[i][0]=matrix[0][j]=0;
                }
            }
        }
        
        
        for (int i=rows-1;i>=0;i--)
        {
            for (int j=colms-1;j>=1;j--)
            {
                if (matrix[i][0]==0 || matrix[0][j]==0)
                {
                    matrix[i][j]=0;
                }
            }
            if (count==0)
                matrix[i][0]=0;
        }
    }
};


2.PASCAL Triangle(3 variations) 

    1.print whole pascals triangle  
    2.print only that number which coressponds to row r and column c(r-1Cc-1)))
    3.print only last row of pascals triangle

ANS     1st approach (using property of pascals triangle)  :

         class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        
        vector<vector<int>> r(numRows);
        
        for (int i=0;i<numRows;i++)
        {
            r[i].resize(i+1);
            r[i][0]=r[i][i]=1;
            
            for (int j=1;j<i;j++)
            {
                r[i][j]=r[i-1][j-1]+r[i-1][j];
            }
        }
        
        return r;
        
    }
};


3.Next Permutation

ANS   1st approach (find all permuations and returning the next permutations)

      2nd approach (O(n)), Intution: we start from right of the array and find the index which is less than of right element(the right candidate to change to make next larger permuation) and then find the element again from left which is just greater than step1 element because we want greater permuation and swap the array from index i to end  :

       class Solution {
public:
    
    void nextPermutation(vector<int>& nums) {
        
        if (nums.size()<=1)
            return ;
        int i,j;
        for (i=nums.size()-2;i>=0;i--)
        {
            if (nums[i]<nums[i+1])
                break;
        }
        if (i>=0)
        {
            for (j=nums.size()-1;j>=0;j--)
                if (nums[j]>nums[i])
                    break;
             swap(nums[i],nums[j]);
        }
        reverse(nums.begin()+i+1,nums.end());
        
    }
};


4.COUNT INVERSIONS in an ARRAY 

ANS.   1st approach  (Bruteforce):

        long long int inversionCount(long long arr[], long long N)
    {
        
        long long count=0;
        for (int i=0;i<N;i++)
        {
            for (int j=i+1;j<N;j++)
            {
                if (arr[i]>arr[j])
                count++;
            }
        }
        
        return count;
    }

     2nd approach  (using merge sort(O(nlogn))):


      #include <iostream>
      using namespace std;

int merge(int A[], int temp[], int l, int mid, int h)
{
    int i, j, k;
    int inv_count = 0;

    i = l;
    j = mid + 1;
    k = l;
    while (i <= mid && j <= h)
    {
        if (A[i] < A[j])
            temp[k++] = A[i++];
        else
        {
            temp[k++] = A[j++];
            inv_count += mid - i + 1;  //(mid-i+1 because mid is upperbound of array which have numbers greater than j and i is lower bound of that array. so we subtract those indexes and get count of numbers which are greater than arr[j]  }
    }
    for (; i <= mid; i++)
        temp[k++] = A[i];
    for (; j <= h; j++)
        temp[k++] = A[j];
    for (i = l; i <= h; i++)
        A[i] = temp[i];

    return inv_count;
}

int mergeSort(int arr[], int temp[], int l, int h)
{
    int mid, incount = 0;

    if (h > l)
    {
        mid = (l + h) / 2;

        incount += mergeSort(arr, temp, l, mid);
        incount += mergeSort(arr, temp, mid + 1, h);
        incount += merge(arr, temp, l, mid, h);
    }

    return incount;
}

int main()
{
    int arr[] = {8, 4, 2, 1};
    int n = sizeof(arr) / sizeof(arr[0]);
    int temp[n];
    int ans = mergeSort(arr, temp, 0, n - 1);
    cout << " Number of inversions are " << ans;
    return 0;
}


5.Best Time to BUY and SELL STOCK

ANS.   1st approach (Brute froce O(n2))  :

       2nd approach using Priority_Queue(varaition of Nearest Greater to Left with Priority Queue) :

        int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<int> temp;
        priority_queue<int> st;
        st.push(prices[n-1]);
        temp.push_back(prices[n-1]);
        for (int i=n-2;i>=0;i--)
        {
             while (st.size()>0 && st.top()<=prices[i])
                st.pop();
            if (st.size()==0)
                temp.push_back(prices[i]);
            else
                temp.push_back(st.top());
            st.push(prices[i]);
        }
        reverse(temp.begin(),temp.end());
        int maxi=INT_MIN;
        for (int i=0;i<n;i++)
        {
            maxi=max(maxi,temp[i]-prices[i]);
        }
        return maxi;
        
    }

       2nd approach (O(n)) :

        int maxProfit(vector<int>& prices) {
        int minimum=INT_MAX,profit=0;
        for (int i=0;i<prices.size();i++)
        {
            minimum=min(minimum,prices[i]);
            profit=max(profit,prices[i]-minimum);
            
        }
        return profit;
        
    }

6.Rotate Image by 90 Degree

ANS.    1st approach (take another matrix and store the rows as columns):  


        2nd approach (transposing the matrix and then swaping the columns)  :

        void rotate(vector<vector<int>>& matrix) {
        int n=matrix.size();
        
        for (int i=0;i<n;i++)
        {
            for (int j=i+1;j<n;j++)
            {
                int temp=matrix[i][j];
                matrix[i][j]=matrix[j][i];
                matrix[j][i]=temp;
                
            }
        }
        
        for (int i=0;i<n;i++)
        {
            for (int j=0;j<n/2;j++)
            {
                int temp=matrix[i][j];
                matrix[i][j]=matrix[i][n-1-j];
                matrix[i][n-1-j]=temp;
                
            }
        }
    }

6.1 Rotate Image by 180 Degree

ANS.    1st approach (Rotate 2 times 90 Degree by above method):

        2nd approach (swaping the columns and then swaping the rows):

6.2 Rotate Image by 270 Degree

ANS.    1st approach (Rotate 3 times 90 Degree by above method):

        2nd approach (Transposing the matrix and then swaping the rows):


       


          
