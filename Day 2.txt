                                                SDE SHEET STRIVER


                                                      DAY 2


1.Set Matrix Zeros

ANS.  1st approach (Brute force appraoch O(n*m)+O(n*m))  :

       class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        int m=matrix.size();
        int count=0;
        int n=matrix[0].size();
        int i,j,k;
        for (i=0;i<m;i++)
        {
            for (j=0;j<n;j++)
            {
                if (matrix[i][j]==0)
                {
                    for (k=0;k<n;k++)
                        if (matrix[i][k]!=0)
                        matrix[i][k]=-1;
                    for (k=0;k<m;k++)
                        if (matrix[k][j]!=0)
                        matrix[k][j]=-1;
                    count++;
                }
            }
            
        }
        
        for (i=0;i<m;i++)
        {
            for (j=0;j<n;j++)
            {
                if (matrix[i][j]==-1 && count!=0)
                {
                    matrix[i][j]=0;
                }
            }
            
        }
        
        
    }
};

     2nd approach (take two dummy array of size m and n  and update with them 0 as the we find any item as 0  and then traverse again to set all those places to zero which have 0 in their index in dummy array):

     3rd approach (take two dummy array as first row and column)  :
      
      class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        int rows=matrix.size();
        int count=1;
        int colms=matrix[0].size();
        
        for (int i=0;i<rows;i++)
        {
            if (matrix[i][0]==0)
                count=0;
            
            for (int j=1;j<colms;j++)
            {
                if (matrix[i][j]==0)
                {
                    matrix[i][0]=matrix[0][j]=0;
                }
            }
        }
        
        
        for (int i=rows-1;i>=0;i--)
        {
            for (int j=colms-1;j>=1;j--)
            {
                if (matrix[i][0]==0 || matrix[0][j]==0)
                {
                    matrix[i][j]=0;
                }
            }
            if (count==0)
                matrix[i][0]=0;
        }
       
        
        
        
    }
};


2.PASCAL Triangle(3 variations) 

    1.print whole pascals triangle  
    2.print only that number which coressponds to row r and column c(r-1Cc-1)))
    3.print only last row of pascals triangle

ANS     1st approach (using property of pascals triangle)  :

         class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        
        vector<vector<int>> r(numRows);
        
        for (int i=0;i<numRows;i++)
        {
            r[i].resize(i+1);
            r[i][0]=r[i][i]=1;
            
            for (int j=1;j<i;j++)
            {
                r[i][j]=r[i-1][j-1]+r[i-1][j];
            }
        }
        
        return r;
        
    }
};


3.Next Permutation

ANS   

          
